[default]
n_gram = 3
# The number of class must be between 2 and 8
num_class = 2
# The class inputs, should be defined according to sequence of class labels
class_labels =  public
                restricted


[tika]
jar_path =      /tika-1.17/tika-app/target/tika-app-1.17.jar
in_path     =   ../originalDocs/
out_path    =   ../originalTxt/


[preprocess]
out_path    = ../kx_data/stemmed
work_dir    = ../process_dir
sensitive_file = sensitive_file.txt
class_inputs =  ../kx_data/kx_public
                ../kx_data/kx_restricted


[features]
# path to each classes regarding to class_labels
class_inputs =  ../kx_data_s/kx_public
                ../kx_data_s/kx_restricted
# plan of splitting data, and we need to define test/train size inside the code
split_plan = cross_validation

# working directory as input of algorithm
;in_path = ../kx_data_s
# output directory (in None use as input dir)
out_path = ../kx_data_s

### output files to be written in out_path
# files to store vectorizer for n_gram
vectorizer_file = vectorizer
# files to store the random forest feature matrix
rfMatrix_file   =   rfMatrix
rfMatrix_file_test  =   rfMatrix_test
# labels of documents
targetNames     =   targetNames
# all files names
trainFileNames       =   trainFileNames
testFileNames   =   testFileNames
allFileNames    =   allFileNames
# names of all features corresponding to n_gram
featureNames    =   featureNames
# indices file from splitting data
indices_file    =   indices_file
# selecting best features:
# '0' for not selecting best features
# 100, 200, or 500 for number of selecting best featues
num_best_features   =   500


[classification]
# working directories
in_path     =   ../kx_data_s
out_path    =   ../kx_data_s

### RF Algo parameters
# number of estimators
n_estimators    =  120
# criterion for feature selection. Possible values are "gini" and "entropy"
criterion   =   gini
# class weight
# define class weights corresponding to class labels with dictionary format
class_weight    =   {0:1, 1:5}
#class_weight = balanced

### output/result files to be written in out_path
# false positive list of documents
fp_filename = fp_files
# false negative list of docs
fn_filename = fn_files
# number of best features
num_features    =  100
# best features regarding to number of features
top_features =  top_features
tags        =   tags
trainFiles  =   trainFiles
testFiles   =   testFiles
# csv file of prediction of test files
predictions =   predictions
wrongPredictions    =   wrongPredictions
# result details for classification (append file with history)
expRecords  =   expRecords
targetNames2    =   targetNames2
# list of all documents, labeled incorrectly
wrongPredictions    =   wrongPredictions
# list of all test documents with "predicted classes"
predictions =   predictions
#
overallResult = overallResult
